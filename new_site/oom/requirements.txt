V4L (Vocal 4 Local) — Technical Requirements & Architecture Specification

Tagline: “Your Community, Your Marketplace.”
Domain: https://v4l.app

Version: 1.0
Date: October 2025
Prepared For: Core Architecture Team

1. Overview
1.1 Objective

V4L (Vocal 4 Local) is a PHP-based web platform designed to connect local organizations with local customers, enabling community-driven commerce and interaction.
The platform allows:

Users to discover, connect, and transact with nearby businesses.

Organizations to manage their operations, publish offerings, and maintain local visibility.

1.2 Vision

Empower every local business with digital tools to engage their community while preserving the locality advantage.

1.3 Tagline

Your Community, Your Marketplace.

2. System Architecture Overview
2.1 Core Technology Stack
Layer	Technology
Language	PHP 8.2+
Frontend Markup	Semantic HTML5
CSS Framework	Bootstrap 5.3+ with custom CSS variables (theme support)
JavaScript	Vanilla JS (ES6+), AJAX for async operations
Real-time	WebSocket (Ratchet PHP or Node.js bridge)
Database (Meta)	SQLite (for metadata; migration path to PostgreSQL/MySQL)
Database (Business Data)	PostgreSQL/MySQL (for production scalability)
Web Server	Apache/Nginx with PHP-FPM
Caching	APCu or file-based caching
Charts/Graphs	Chart.js or ApexCharts
Icons	Bootstrap Icons or Font Awesome
3. Metadata-Driven Entity Framework
3.1 Meta Database

The meta layer (stored in SQLite) defines all entities, attributes, functions, relationships, and validations.

Entities are stored in the following meta tables:

entity_definition

entity_attribute

entity_function

entity_function_handler

entity_relationship

entity_validation_rule

3.2 Dynamic Schema Generation

The application dynamically reads metadata and auto-generates physical database tables in the operational database.

Schema includes:

id (UUID PK)

created_at, updated_at, deleted_at

Auto-generated foreign keys and indexes

Version tracking (version_no, changed_by)

3.3 CRUD Interface Generation

From metadata, the system automatically renders:

List Views (sortable, filterable, paginated)

Detail Views (categorized tabs)

Forms (with validation, related entity selectors)

Action Buttons (mapped to entity functions)

Relationship Panels (showing linked entities)

4. Functional Modules
4.1 Marketplace (Public)

Home / Discover page

Organization and product listings

Search by category, location, tags

Organization profiles (ratings, reviews)

Contact / Inquiry options

Cart and checkout for registered users

4.2 Dashboard (Authenticated)

Organization management (multi-organization support)

Item/product management

Order and inventory tracking

Customer engagement and analytics

Communication center (notifications, chats)

4.3 Administration

Manage metadata (entities, attributes, permissions)

Manage users and organizations

Monitor system logs, performance, and WebSocket events

5. User Management & Security
5.1 Authentication

Secure password hashing (password_hash, bcrypt/argon2)

Session regeneration on login

“Remember Me” tokens with expiry

Password reset via secure token email

Account lockout after N failed attempts

5.2 Authorization

RBAC (Role-Based Access Control) with role and permission tables.

Entity-level and field-level access control.

Sensitive fields can be masked (e.g., PII).

Organization context: all organization-specific records must include organization_id.

5.3 Security Controls

Headers: CSP, X-Frame-Options, X-Content-Type-Options, Strict-Transport-Security

Input Validation: All input validated server-side

SQL Injection: Prevented via PDO prepared statements

XSS: Escaping via htmlspecialchars()

CSRF: Token validation for all state-changing operations

File Uploads: MIME/type checks, size limits, secure directory storage

Data Encryption: Sensitive data (passwords, API keys, PII)

6. Frontend UX & RWD Guidelines
6.1 Responsive Design (2025 Standard)

Mobile-first with Bootstrap 5 grid breakpoints:

xs (<576px): phones

sm (576–767px): large phones

md (768–991px): tablets

lg (992–1199px): desktops

xl (1200–1399px): large desktops

xxl (1400px+): extra large screens

6.2 Layout Patterns
Device	Design Pattern
Desktop (lg+)	Sidebar navigation, multi-column forms, table views
Tablet (md)	Collapsible sidebar, 2-column forms
Mobile (<md)	Card-based layouts, bottom nav/hamburger
6.3 Navigation & UI Components

Top-level menus: My, Organization, Market, Common

Sub-menus follow domains defined in metadata.

Contextual breadcrumbs.

Dual-theme (Light/Dark) toggle.

Consistent header/footer/sidebar includes.

7. Application Features by Entity
Feature	Description
2.4.4 CRUD	Auto-generated from metadata
2.4.5 Actions	Buttons for public entity methods
2.4.6 Relations	Foreign key selectors/links
2.4.7 Related Lists	Shown at the bottom of the detail view
Soft Delete	deleted_at field for reversible removal
Versioning	Maintain record history for audit trail
8. Real-Time Features
8.1 WebSocket Events

Entity changes (insert/update/delete)

Notifications and alerts

User presence and collaboration

Typing indicators in shared views

8.2 Reliability

Auto-reconnect with exponential backoff

JSON-based message schema

Token-authenticated sessions

Fallback to long polling

9. Testing & Quality Assurance
9.1 Unit Tests (PHPUnit 10+)

Validation logic

Business logic functions

API endpoints

Workflow transitions

9.2 Integration Tests

Database fixture-based CRUD

API + WebSocket connections

Authentication flows

9.3 Code Quality

PSR-12 compliant

PHPDoc for all classes and methods

Minimum 80% test coverage

Clear inline comments and type hints

10. Configuration & Deployment
10.1 Configuration Management

.env for environment-specific settings

Config classes with type-safe access

Secrets excluded from VCS

Sensible defaults and overrides

10.2 Logging & Error Handling

PSR-3 compatible logging (daily rotation)

Exception handling with custom error pages

Contextual metadata (user, IP, request ID)

Production vs. Development modes

10.3 Performance

Caching (query, page fragments, assets)

Lazy loading relationships

Minified JS/CSS bundles

Optimized image delivery (webp)

Query performance monitoring

11. Architectural Principles
Principle	Description
SOLID	One class, one purpose; dependency inversion
Design Patterns	Repository, Factory, Strategy, Observer, Singleton
Separation of Concerns	MVC + Service + Repository layers
DRY / KISS / YAGNI	Simplicity and reusability prioritized
Extensibility	New entities can be added purely via metadata
Maintainability	Modular, readable, testable code
Security First	All data, session, and communication layers hardened
12. Important Notes

No Data Population in meta or business DB unless explicitly authorized.

Migration-Ready: Meta layer supports schema export to PostgreSQL/MySQL.

Scalability: Designed to handle thousands of entities and millions of records.

Accessibility: Fully compliant with WCAG 2.1 AA.

13. Deliverables

Meta Database (SQLite file) defining entity structure.

PHP Backend Framework (meta-driven CRUD engine).

Responsive Frontend UI with Bootstrap 5.

Real-time WebSocket server for entity updates.

Automated Tests (unit + integration).

Deployment configuration (.env, Apache/Nginx, supervisor).

Documentation (developer guide, API specs, architecture diagrams).