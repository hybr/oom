You are an expert PHP system architect and developer.  
You are also an excellent UI/UX designers to ensure quality, security, and scalability.
Finally, you are ERP functional consultants and business analysts, who is essential to align business processes with the system.

Generate clean, documented, modular PHP code following this architecture. Use OOP principles. Ensure extensibility (easy to add new entities and processes).

Implement the full responsiveness across mobile, tablet, web, and desktop platforms, following 2025 Responsive Web Design (RWD) standards.

Setup unit test case framework

Provide both dark mode and light mode themes.

Build a server-side web application with the following architecture and technologies:

Architecture & Tech Stack

    Backend: PHP Core (no framework).

    Entities: Each entity is a PHP Class with attributes (fields) and actions (methods).

    Process: A separate PHP Class as State Machine that manages entity workflows (states, transitions, roles, conditions).

    Database: SQLite (lightweight, file-based).

    Frontend: HTML, CSS (Bootstrap for UI), JavaScript with Ajax for requests.

    Real-time: WebSocket for pushing live updates (e.g., status changes, notifications).

    Microservices: Backend should be modular and designed as microservices (separate modules for entities, workflow, notifications, reports, etc.).

Requirements

    Entity Definition

        Each Entity is a PHP class with attributes and CRUD methods. 

        Add as many as methods for entity actions

        A web page should be there to access the entity via Frontend. It is must requirement.

        Entities must be stored in SQLite tables.

        Auto-generate database schema from entity definitions.

        Where ever possible include one to one or one to many  relationships with other entities. Many to many relationships must be done using the another Entity. 

        Do not polulate the records for entity until asked in the prompt.
        
    Process (Workflow Engine)

        A PHP State Machine class (Process) to manage entity lifecycles.

        Store workflows in SQLite (tables for process, states, transitions).

        Each transition has rules (allowed roles, conditions, actions).

        Support rollback, audit logs, and history tracking.

    Frontend Integration

        Use Bootstrap for clean UI.

        Use includes\header.php and includes\footer.php to show consistent theme on each web page.
        
        Ajax (vanilla JS or jQuery) to call backend PHP endpoints.

        Desktop (lg+): Traditional table view with optimized columns
        Mobile (< lg): Card-based layout with dropdowns for actions

        When showing the list of records provide one action of "View Details". 
        When clicked on this the detail view of the record of that entity is shown. 
        Also all the applicable actions at record level are also shown.

        Touch-Friendly: Large touch targets and dropdowns
        Information Hierarchy: Most important info (name, status) prominently displayed
        Space Efficient: Data wraps naturally without horizontal scrolling
        Accessible Actions: Easy-to-use dropdown menus instead of cramped button groups
        Visual Clarity: Icons and badges for quick scanning

        WebSocket for real-time updates (status changes, new messages, notifications).

    Microservices

        Separate services/modules for:

            Entity management (CRUD)

            Process/workflow engine

            Notifications (WebSocket events)

            Reports (text, tables, charts)

Deliverables

    Folder structure (clear separation of entities/, process/, services/, public/).

    PHP scripts for database migrations (create tables automatically).

    Frontend page: show list, allow actions, update status in real-time.

Generate clean, documented, modular PHP code following this architecture. Use OOP principles. Ensure extensibility (easy to add new entities and processes).
