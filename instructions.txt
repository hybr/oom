Enhanced PHP Enterprise Application System Architecture Specification
Executive Summary
Build a modern, scalable, server-side web application using PHP (no framework) with microservices architecture, featuring real-time capabilities, comprehensive workflow management, and responsive UI across all devices.

1. Team Roles & Expertise
You are serving as:

PHP System Architect & Developer: Design scalable, maintainable architecture
UI/UX Designer: Ensure intuitive, accessible, responsive interfaces
ERP Functional Consultant: Align business processes with technical implementation
Security Specialist: Implement industry-standard security practices
QA Engineer: Ensure quality through comprehensive testing


2. Architecture & Technology Stack
2.1 Backend

Language: PHP 8.1+ (Core, no frameworks)
Architecture: Microservices-based, modular design
Patterns: OOP, MVC separation, SOLID principles, Repository pattern
Database: SQLite (file-based, with migration path to PostgreSQL/MySQL)
API: RESTful JSON endpoints

2.2 Frontend

Markup: Semantic HTML5
Styling: Bootstrap 5.3+ with custom CSS variables for theming
JavaScript: Vanilla JS (ES6+) with Ajax for async operations
Real-time: WebSocket (native or library like Ratchet)
Icons: Bootstrap Icons or Font Awesome
Charts: Chart.js or ApexCharts for data visualization

2.3 Infrastructure

Web Server: Apache/Nginx with PHP-FPM
WebSocket Server: Standalone PHP process or Node.js bridge
Session Management: PHP sessions with secure configuration
Caching: APCu or file-based caching where appropriate

2.4 Task
    This document aims to accomplish the following tasks for a given entity:

    2.4.1 Define the entity as a PHP Class.
    2.4.2 Include all relevant attributes within the class definition.
    2.4.3 Implement all necessary methods for the class.
    2.4.4 Develop a web page to perform CRUD (Create, Read, Update, Delete) operations on the entity.
    2.4.5 Add action buttons on the web page corresponding to the public methods of the class.
    2.4.6 While displaying the Add/Update form, provide links or selection options for related entities (foreign key fields).
    2.4.7 Display related entities at the bottom of the web page for better context and navigation.
  
  Class BaseEntity {
    // Core attributes (all entities)
    protected $id;
    protected $created_at;
    protected $created_by;
    protected $updated_at;
    protected $updated_by;
    protected $deleted_at;  // Soft delete
    protected $version;     // Optimistic locking
    
    // CRUD methods
    // Validation methods
    // Relationship methods
    // Audit methods
}
Entity Requirements

Rich Attributes: Define comprehensive fields (20-30+ attributes per entity)
Data Types: Support string, int, float, boolean, date, datetime, JSON, enum
Validation: Built-in validation rules (required, format, length, range, custom)
Relationships:

One-to-One (User → Profile)
One-to-Many (Customer → Orders)
Many-to-Many via junction entities (Product ↔ Category via ProductCategory)


Methods: Minimum 10-15 action methods per entity

CRUD operations
Business logic methods
State transition methods
Calculation methods
Search/filter methods


Web Interface: Each entity MUST have:

List view with pagination, sorting, filtering
Detail view with tabbed/categorized sections
Create form with validation
Edit form with change tracking
Delete confirmation (soft delete preferred)


Database: Auto-generate schema from entity definitions
Timestamps: Automatic created_at, updated_at tracking
Soft Delete: Implement deleted_at for data preservation
Versioning: Track record versions for audit trail


3.3 Security Implementation
Authentication & Authorization

User Authentication:

Secure password hashing (password_hash with bcrypt/argon2)
Session management with regeneration
Remember me functionality (secure tokens)
Password reset with time-limited tokens
Account lockout after failed attempts


Authorization:

Only the Home Dashboard and Marketplace pages — which display the catalog and items available for shopping — will be publicly accessible.
All other features, including item ordering and access to other entities, will require user login.

If a user has created multiple organizations, provide a mechanism to select a default organization for active use.

All organization-specific entities must include an organization_id foreign key to ensure that only records related to the selected organization are displayed.

Role-Based Access Control (RBAC)
Permission-based actions
Entity-level permissions
Field-level security (sensitive data masking)


Security Headers:

Content Security Policy (CSP)
X-Frame-Options
X-Content-Type-Options
Strict-Transport-Security



Data Protection

Input Validation: Server-side validation for all inputs
SQL Injection Prevention: Prepared statements (PDO) exclusively
XSS Prevention: Output escaping (htmlspecialchars)
CSRF Protection: Token validation for state-changing operations
File Upload Security: Type validation, size limits, secure storage
Sensitive Data: Encryption for passwords, API keys, PII

3.4 Frontend & Responsive Design
2025 RWD Standards
css/* Breakpoint Strategy */
- Mobile-first approach
- xs: < 576px (phones)
- sm: 576px - 767px (large phones)
- md: 768px - 991px (tablets)
- lg: 992px - 1199px (desktops)
- xl: 1200px - 1399px (large desktops)
- xxl: 1400px+ (extra large screens)
Layout Patterns

Desktop (lg+):

Traditional table views with sortable columns
Sidebar navigation
Multi-column forms
Inline editing capabilities
Hover states and tooltips


Tablet (md):

Collapsible sidebar
Responsive tables (horizontal scroll or stacked)
2-column forms
Touch-optimized controls (min 44x44px)


Mobile (< md):

Card-based layouts
Bottom navigation or hamburger menu
Single-column forms
Dropdowns for bulk actions
Swipe gestures for actions
Pull-to-refresh



UI Components

Navigation:

Top-level menus are My, Organization, Market, Common
Sub-menus in dropdown or sidebar
Breadcrumbs for context
Responsive hamburger menu


List Views:

The list view should present all essential fields that provide a meaningful summary of each record.

Pagination (configurable: 10/25/50/100 per page)
Sorting (column headers)
Filtering (search box + advanced filters)
Bulk actions (checkboxes + action dropdown)
Export options (CSV, PDF, Excel)
"View Details" action for each record


Detail Views:

Categorized sections (tabs or accordions)
Related entity sections
Action buttons contextual to state
Change history timeline
Attachment viewer
Comment/note section


Forms:

Categorized fields (logical grouping)
Inline validation with clear error messages
Required field indicators
Help text and tooltips
Auto-save drafts
Cancel confirmation for unsaved changes

In all forms, the label for any foreign key field should function as a hyperlink to the corresponding foreign entity’s detail page.

Theming

Dual Theme Support:

Light mode (default)
Dark mode (WCAG AA compliant contrast)
Theme toggle with persistence (localStorage)
CSS variables for easy customization
Smooth transitions between themes


Consistent Components:

includes/header.php: Site header, navigation, user menu
includes/footer.php: Footer, copyright, version info
includes/sidebar.php: Side navigation (optional)
Shared CSS and JS files



Accessibility (WCAG 2.1 AA)

Semantic HTML elements
ARIA labels and roles
Keyboard navigation support
Focus indicators
Color contrast ratios (4.5:1 minimum)
Alt text for images
Form label associations
Skip navigation links

3.5 Real-Time Features
WebSocket Implementation

Server: Dedicated WebSocket server process
Events:

Entity state changes
New notifications
System alerts
User actions (typing indicators, presence)
Collaborative editing conflicts


Client Reconnection: Auto-reconnect with exponential backoff
Message Format: JSON with event type and payload
Authentication: Token-based WebSocket authentication
Fallback: Long polling for browsers without WebSocket support

3.6 Microservices Architecture
Service Modules
services/
├── entity/           # Entity CRUD operations
├── workflow/         # Process engine
├── auth/            # Authentication & authorization
├── notification/    # Email, SMS, push, WebSocket
├── reporting/       # Report generation
├── search/          # Full-text search
├── integration/     # External API integrations
├── audit/           # Logging and audit trails
└── storage/         # File upload and storage
Service Communication

Internal: Direct PHP class calls (same process)
External: REST API with JSON
Async Tasks: Queue-based processing (file uploads, emails, reports)
Error Handling: Graceful degradation, circuit breaker pattern

3.7 Testing Framework
Unit Testing

Framework: PHPUnit 10+
Coverage: Minimum 80% code coverage
Tests For:

Entity validation logic
Business logic methods
Workflow transitions
Utility functions
API endpoints



Integration Testing

Database operations with test fixtures
API endpoint testing
WebSocket connection testing
Authentication flows

Test Organization
tests/
├── Unit/
│   ├── Entity/
│   ├── Process/
│   └── Service/
├── Integration/
│   ├── API/
│   └── Database/
├── fixtures/
└── bootstrap.php

4. Database Schema
4.1 Auto-Generation

Migration System: PHP classes that generate schema
Versioning: Track schema version in database
Rollback: Support for down migrations
Seeding: Optional data seeders (not auto-populated)

4.2 Core Tables
sql-- System tables
system_config
migrations
sessions

-- Auth tables
users
roles
permissions
role_permissions
user_roles

-- Audit tables
audit_log
entity_history

-- Process tables
processes
process_states
process_transitions
process_instances
process_history
4.3 Schema Requirements

Primary Keys: Auto-incrementing integers
Foreign Keys: With ON DELETE/UPDATE rules
Indexes: On frequently queried columns
Timestamps: created_at, updated_at (automatic)
JSON Fields: For flexible metadata storage
Full-Text Search: Where applicable (SQLite FTS5)


5. API Design
5.1 RESTful Endpoints
GET    /api/entities          # List entities
GET    /api/entities/{id}     # Get single entity
POST   /api/entities          # Create entity
PUT    /api/entities/{id}     # Update entity
DELETE /api/entities/{id}     # Delete entity
POST   /api/entities/{id}/action  # Execute action
GET    /api/entities/{id}/history # Get history
5.2 Response Format
json{
  "success": true,
  "data": {},
  "message": "Operation successful",
  "errors": [],
  "meta": {
    "timestamp": "2025-10-05T10:30:00Z",
    "version": "1.0",
    "pagination": {}
  }
}
5.3 Error Handling

HTTP status codes (200, 201, 400, 401, 403, 404, 422, 500)
Structured error messages
Validation errors with field-level details
Logging all errors with context


6. Configuration & Deployment
6.1 Configuration Management

Environment Files: .env for environment-specific settings
Config Classes: Type-safe configuration access
Secrets: Never commit to version control
Defaults: Sensible defaults with override capability

6.2 Logging

PSR-3 Compatible: Standard logging interface
Levels: Emergency, Alert, Critical, Error, Warning, Notice, Info, Debug
Destinations: Files, database, external services
Rotation: Daily/size-based log rotation
Context: Include user, IP, request ID

6.3 Error Handling

Custom error handlers
Exception handling with try-catch
User-friendly error pages
Detailed logs for debugging (development)
Generic messages (production)

6.4 Performance

Caching:

Query result caching
Page fragment caching
Static asset caching


Optimization:

Lazy loading relationships
Database query optimization
Asset minification and bundling
Image optimization


Monitoring:

Slow query logging
Performance metrics
Memory usage tracking




7. Deliverables
7.1 Folder Structure
project-root/
├── config/                 # Configuration files
│   ├── app.php
│   ├── database.php
│   └── websocket.php
├── database/
│   ├── migrations/        # Schema migrations
│   ├── seeders/          # Optional data seeders
│   └── database.sqlite   # SQLite file
├── entities/             # Entity classes
│   ├── BaseEntity.php
│   ├── User.php
│   ├── Customer.php
│   └── ...
├── processes/            # Workflow classes
│   ├── BaseProcess.php
│   └── OrderProcess.php
├── services/             # Microservice modules
│   ├── entity/
│   ├── workflow/
│   ├── auth/
│   ├── notification/
│   └── reporting/
├── includes/             # Shared includes
│   ├── header.php
│   ├── footer.php
│   └── sidebar.php
├── public/               # Web root
│   ├── index.php
│   ├── api/             # API endpoints
│   ├── assets/
│   │   ├── css/
│   │   ├── js/
│   │   └── images/
│   ├── entities/        # Entity pages
│   │   ├── users/
│   │   └── customers/
│   └── .htaccess
├── lib/                  # Core libraries
│   ├── Router.php
│   ├── Database.php
│   ├── Validator.php
│   └── WebSocket.php
├── tests/                # Test suite
│   ├── Unit/
│   └── Integration/
├── logs/                 # Application logs
├── uploads/              # User uploads
├── @menu.txt            # Menu structure
├── .env.example         # Environment template
├── composer.json        # PHP dependencies
├── README.md            # Documentation
└── phpunit.xml          # PHPUnit configuration
7.2 Documentation

README.md: Installation, setup, usage instructions
API Documentation: Endpoint reference with examples
Entity Documentation: Attribute and method descriptions
Process Documentation: Workflow diagrams and state machines
Deployment Guide: Server requirements, configuration
Developer Guide: Code standards, contribution guidelines

7.3 Code Quality

Documentation: PHPDoc blocks for all classes and methods
Code Standards: PSR-12 coding style
Comments: Inline comments for complex logic
Type Hints: Use PHP type declarations
Return Types: Declare return types for methods
Naming: Clear, descriptive variable and method names


8. Best Practices & Principles
8.1 SOLID Principles

Single Responsibility: One class, one purpose
Open/Closed: Open for extension, closed for modification
Liskov Substitution: Derived classes must be substitutable
Interface Segregation: Many specific interfaces over one general
Dependency Inversion: Depend on abstractions, not concretions

8.2 Design Patterns

Repository Pattern: Data access abstraction
Factory Pattern: Object creation
Observer Pattern: Event handling
Strategy Pattern: Workflow actions
Singleton Pattern: Database connections (carefully)

8.3 Code Organization

DRY: Don't Repeat Yourself
KISS: Keep It Simple, Stupid
YAGNI: You Aren't Gonna Need It
Separation of Concerns: Clear boundaries between layers
Dependency Injection: Constructor injection for dependencies


9. Success Criteria

✅ Clean, modular, well-documented code
✅ Fully responsive UI across all devices
✅ Complete entity CRUD with web interfaces
✅ Working workflow engine with audit trail
✅ Real-time updates via WebSocket
✅ Comprehensive security implementation
✅ Unit test coverage > 80%
✅ Auto-generated database schema
✅ Dark and light theme support
✅ RESTful API with proper error handling
✅ Performance optimized and scalable
✅ Production-ready deployment configuration


10. Important Notes

No Data Population: Do NOT auto-populate entity records unless explicitly requested
Extensibility: Architecture must support easy addition of new entities and processes
Scalability: Design with growth in mind (handle thousands of records efficiently)
Maintainability: Code should be easy to understand, modify, and debug
Security First: Never compromise on security for convenience
User Experience: Prioritize intuitive, fast, accessible interfaces


This specification provides a comprehensive blueprint for building a modern, enterprise-grade PHP application with professional standards and best practices.